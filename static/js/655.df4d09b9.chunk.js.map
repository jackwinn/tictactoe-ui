{"version":3,"file":"static/js/655.df4d09b9.chunk.js","mappings":"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","sources":["components/square.js","pages/ticTacToePage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/square.css\";\r\n\r\nconst circleSvg = (\r\n  <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\r\n    <g\r\n      id=\"SVGRepo_tracerCarrier\"\r\n      stroke-linecap=\"round\"\r\n      stroke-linejoin=\"round\"\r\n    ></g>\r\n    <g id=\"SVGRepo_iconCarrier\">\r\n      <path\r\n        d=\"M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\"\r\n        stroke=\"#ffffff\"\r\n        stroke-width=\"2\"\r\n        stroke-linecap=\"round\"\r\n        stroke-linejoin=\"round\"\r\n      ></path>\r\n    </g>\r\n  </svg>\r\n);\r\n\r\nconst crossSvg = (\r\n  <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\r\n    <g\r\n      id=\"SVGRepo_tracerCarrier\"\r\n      stroke-linecap=\"round\"\r\n      stroke-linejoin=\"round\"\r\n    ></g>\r\n    <g id=\"SVGRepo_iconCarrier\">\r\n      <path\r\n        d=\"M19 5L5 19M5.00001 5L19 19\"\r\n        stroke=\"#fff\"\r\n        stroke-width=\"1.5\"\r\n        stroke-linecap=\"round\"\r\n        stroke-linejoin=\"round\"\r\n      ></path>\r\n    </g>\r\n  </svg>\r\n);\r\n\r\nconst Square = ({\r\n  gameState,\r\n  setGameState,\r\n  socket,\r\n  playingAs,\r\n  currentElement,\r\n  finishedArrayState,\r\n  setFinishedState,\r\n  finishedState,\r\n  id,\r\n  currentPlayer,\r\n  setCurrentPlayer,\r\n}) => {\r\n  const [icon, setIcon] = useState(null);\r\n\r\n  const clickOnSquare = () => {\r\n    if (playingAs !== currentPlayer) {\r\n      return;\r\n    }\r\n\r\n    if (finishedState) {\r\n      return;\r\n    }\r\n\r\n    if (!icon) {\r\n      if (currentPlayer === \"circle\") {\r\n        setIcon(circleSvg);\r\n      } else {\r\n        setIcon(crossSvg);\r\n      }\r\n\r\n      const myCurrentPlayer = currentPlayer;\r\n      socket.emit(\"playerMoveFromClient\", {\r\n        state: {\r\n          id,\r\n          sign: myCurrentPlayer,\r\n        },\r\n      });\r\n\r\n      setCurrentPlayer(currentPlayer === \"circle\" ? \"cross\" : \"circle\");\r\n\r\n      setGameState((prevState) => {\r\n        let newState = [...prevState];\r\n        const rowIndex = Math.floor(id / 3);\r\n        const colIndex = id % 3;\r\n        newState[rowIndex][colIndex] = myCurrentPlayer;\r\n        return newState;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={clickOnSquare}\r\n      className={`square ${finishedState ? \"not-allowed\" : \"\"}\r\n      ${currentPlayer !== playingAs ? \"not-allowed\" : \"\"}\r\n       ${finishedArrayState.includes(id) ? finishedState + \"-won\" : \"\"}\r\n       ${finishedState && finishedState !== playingAs ? \"grey-background\" : \"\"}\r\n       `}\r\n    >\r\n      {currentElement === \"circle\"\r\n        ? circleSvg\r\n        : currentElement === \"cross\"\r\n        ? crossSvg\r\n        : icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"../styles/ticTacToePage.css\";\r\nimport Square from \"../components/square\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst renderFrom = [\r\n  [1, 2, 3],\r\n  [4, 5, 6],\r\n  [7, 8, 9],\r\n];\r\n\r\nconst TicTacToePage = () => {\r\n  const storedUser = localStorage.getItem(\"user\");\r\n  const user = storedUser ? JSON.parse(storedUser) : null;\r\n\r\n  const [gameState, setGameState] = useState(renderFrom);\r\n  const [currentPlayer, setCurrentPlayer] = useState(\"circle\");\r\n  const [finishedState, setFinishetState] = useState(false);\r\n  const [finishedArrayState, setFinishedArrayState] = useState([]);\r\n  const [playOnline, setPlayOnline] = useState(false);\r\n  const [socket, setSocket] = useState(null);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [opponentName, setOpponentName] = useState(null);\r\n  const [playingAs, setPlayingAs] = useState(null);\r\n\r\n  const checkWinner = () => {\r\n    // row dynamic\r\n    for (let row = 0; row < gameState.length; row++) {\r\n      if (\r\n        gameState[row][0] === gameState[row][1] &&\r\n        gameState[row][1] === gameState[row][2]\r\n      ) {\r\n        setFinishedArrayState([row * 3 + 0, row * 3 + 1, row * 3 + 2]);\r\n        return gameState[row][0];\r\n      }\r\n    }\r\n\r\n    // column dynamic\r\n    for (let col = 0; col < gameState.length; col++) {\r\n      if (\r\n        gameState[0][col] === gameState[1][col] &&\r\n        gameState[1][col] === gameState[2][col]\r\n      ) {\r\n        setFinishedArrayState([0 * 3 + col, 1 * 3 + col, 2 * 3 + col]);\r\n        return gameState[0][col];\r\n      }\r\n    }\r\n\r\n    if (\r\n      gameState[0][0] === gameState[1][1] &&\r\n      gameState[1][1] === gameState[2][2]\r\n    ) {\r\n      return gameState[0][0];\r\n    }\r\n\r\n    if (\r\n      gameState[0][2] === gameState[1][1] &&\r\n      gameState[1][1] === gameState[2][0]\r\n    ) {\r\n      return gameState[0][2];\r\n    }\r\n\r\n    const isDrawMatch = gameState.flat().every((e) => {\r\n      if (e === \"circle\" || e === \"cross\") return true;\r\n    });\r\n\r\n    if (isDrawMatch) return \"draw\";\r\n\r\n    return null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const winner = checkWinner();\r\n    if (winner) {\r\n      setFinishetState(winner);\r\n    }\r\n  }, [gameState]);\r\n\r\n  socket?.on(\"opponentLeftMatch\", () => {\r\n    setFinishetState(\"opponentLeftMatch\");\r\n  });\r\n\r\n  socket?.on(\"playerMoveFromServer\", (data) => {\r\n    const id = data.state.id;\r\n    setGameState((prevState) => {\r\n      let newState = [...prevState];\r\n      const rowIndex = Math.floor(id / 3);\r\n      const colIndex = id % 3;\r\n      newState[rowIndex][colIndex] = data.state.sign;\r\n      return newState;\r\n    });\r\n    setCurrentPlayer(data.state.sign === \"circle\" ? \"cross\" : \"circle\");\r\n  });\r\n\r\n  socket?.on(\"connect\", function () {\r\n    setPlayOnline(true);\r\n  });\r\n\r\n  socket?.on(\"OpponentNotFound\", function () {\r\n    setOpponentName(false);\r\n  });\r\n\r\n  socket?.on(\"OpponentFound\", function (data) {\r\n    setPlayingAs(data.playingAs);\r\n    setOpponentName(data.opponentName);\r\n  });\r\n\r\n  async function playOnlineClick() {\r\n    const username = user.username;\r\n    setPlayerName(username);\r\n\r\n    const newSocket = io(process.env.REACT_APP_SOCKET, {\r\n      autoConnect: true,\r\n    });\r\n\r\n    newSocket?.emit(\"request_to_play\", {\r\n      playerName: username,\r\n    });\r\n\r\n    setSocket(newSocket);\r\n  }\r\n\r\n  if (!playOnline) {\r\n    return (\r\n      <div className=\"main-div\">\r\n        <button onClick={playOnlineClick} className=\"playOnline\">\r\n          Play Online\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (playOnline && !opponentName) {\r\n    return (\r\n      <div className=\"waiting\">\r\n        <p>Waiting for opponent</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-div\">\r\n      <div className=\"move-detection\">\r\n        <div\r\n          className={`left ${\r\n            currentPlayer === playingAs ? \"current-move-\" + currentPlayer : \"\"\r\n          }`}\r\n        >\r\n          {playerName}\r\n        </div>\r\n        <div\r\n          className={`right ${\r\n            currentPlayer !== playingAs ? \"current-move-\" + currentPlayer : \"\"\r\n          }`}\r\n        >\r\n          {opponentName}\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <h1 className=\"game-heading water-background\">Tic Tac Toe</h1>\r\n        <div className=\"square-wrapper\">\r\n          {gameState.map((arr, rowIndex) =>\r\n            arr.map((e, colIndex) => {\r\n              return (\r\n                <Square\r\n                  socket={socket}\r\n                  playingAs={playingAs}\r\n                  gameState={gameState}\r\n                  finishedArrayState={finishedArrayState}\r\n                  finishedState={finishedState}\r\n                  currentPlayer={currentPlayer}\r\n                  setCurrentPlayer={setCurrentPlayer}\r\n                  setGameState={setGameState}\r\n                  id={rowIndex * 3 + colIndex}\r\n                  key={rowIndex * 3 + colIndex}\r\n                  currentElement={e}\r\n                />\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n        {finishedState &&\r\n          finishedState !== \"opponentLeftMatch\" &&\r\n          finishedState !== \"draw\" && (\r\n            <h3 className=\"finished-state\">\r\n              {finishedState === playingAs ? \"You \" : finishedState} won the\r\n              game\r\n            </h3>\r\n          )}\r\n        {finishedState &&\r\n          finishedState !== \"opponentLeftMatch\" &&\r\n          finishedState === \"draw\" && (\r\n            <h3 className=\"finished-state\">It's a Draw</h3>\r\n          )}\r\n      </div>\r\n      {!finishedState && opponentName && (\r\n        <h2>You are playing against {opponentName}</h2>\r\n      )}\r\n      {finishedState && finishedState === \"opponentLeftMatch\" && (\r\n        <h2>You won the match, Opponent has left</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToePage;\r\n"],"names":["circleSvg","_jsxs","viewBox","fill","xmlns","children","_jsx","id","d","stroke","crossSvg","_ref","gameState","setGameState","socket","playingAs","currentElement","finishedArrayState","setFinishedState","finishedState","currentPlayer","setCurrentPlayer","icon","setIcon","useState","onClick","clickOnSquare","myCurrentPlayer","emit","state","sign","prevState","newState","rowIndex","Math","floor","colIndex","className","includes","renderFrom","TicTacToePage","storedUser","localStorage","getItem","user","JSON","parse","setFinishetState","setFinishedArrayState","playOnline","setPlayOnline","setSocket","playerName","setPlayerName","opponentName","setOpponentName","setPlayingAs","useEffect","winner","checkWinner","row","length","col","flat","every","e","on","data","map","arr","Square","async","username","newSocket","io","process","autoConnect"],"sourceRoot":""}